$version Generated by VerilatedVcd $end
$date Tue Nov 26 04:14:51 2024 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 ` a0 [31:0] $end
  $var wire  1 ^ clk $end
  $var wire  1 _ rst $end
  $scope module top $end
   $var wire 32 a ADDR_WIDTH [31:0] $end
   $var wire 32 a DATA_WIDTH [31:0] $end
   $var wire 32 a INSTR_WIDTH [31:0] $end
   $var wire 32 c OFFSET [31:0] $end
   $var wire 32 b REG_DATA_WIDTH [31:0] $end
   $var wire 32 ` a0 [31:0] $end
   $var wire  3 ) aluCtrl [2:0] $end
   $var wire 32 , aluOp1 [31:0] $end
   $var wire 32 - aluOp2 [31:0] $end
   $var wire 32 / aluOut [31:0] $end
   $var wire  1 * aluSrc $end
   $var wire 32 2 branchPC [31:0] $end
   $var wire  1 ^ clk $end
   $var wire  1 0 eq $end
   $var wire 32 ' immOp [31:0] $end
   $var wire  1 d immSrc $end
   $var wire 32 3 incPC [31:0] $end
   $var wire 32 & instr [31:0] $end
   $var wire 32 1 nextPC [31:0] $end
   $var wire 32 % pc [31:0] $end
   $var wire  1 + pcSrc $end
   $var wire 32 . regOp2 [31:0] $end
   $var wire  1 ( regWrite $end
   $var wire  1 _ rst $end
   $scope module PCReg $end
    $var wire 32 a DATA_WIDTH [31:0] $end
    $var wire 32 % PC [31:0] $end
    $var wire  1 ^ clk $end
    $var wire 32 1 next_PC [31:0] $end
    $var wire  1 _ rst $end
   $upscope $end
   $scope module RegFile $end
    $var wire 32 , ALUop1 [31:0] $end
    $var wire 32 / ALUout [31:0] $end
    $var wire 32 a DATA_WIDTH [31:0] $end
    $var wire 32 b REG_DATA_WIDTH [31:0] $end
    $var wire  1 ( RegWrite $end
    $var wire 32 ` a0 [31:0] $end
    $var wire  1 ^ clk $end
    $var wire  5 6 rd [4:0] $end
    $var wire 32 . regOp2 [31:0] $end
    $var wire 32 7 rom_array[0] [31:0] $end
    $var wire 32 A rom_array[10] [31:0] $end
    $var wire 32 B rom_array[11] [31:0] $end
    $var wire 32 C rom_array[12] [31:0] $end
    $var wire 32 D rom_array[13] [31:0] $end
    $var wire 32 E rom_array[14] [31:0] $end
    $var wire 32 F rom_array[15] [31:0] $end
    $var wire 32 G rom_array[16] [31:0] $end
    $var wire 32 H rom_array[17] [31:0] $end
    $var wire 32 I rom_array[18] [31:0] $end
    $var wire 32 J rom_array[19] [31:0] $end
    $var wire 32 8 rom_array[1] [31:0] $end
    $var wire 32 K rom_array[20] [31:0] $end
    $var wire 32 L rom_array[21] [31:0] $end
    $var wire 32 M rom_array[22] [31:0] $end
    $var wire 32 N rom_array[23] [31:0] $end
    $var wire 32 O rom_array[24] [31:0] $end
    $var wire 32 P rom_array[25] [31:0] $end
    $var wire 32 Q rom_array[26] [31:0] $end
    $var wire 32 R rom_array[27] [31:0] $end
    $var wire 32 S rom_array[28] [31:0] $end
    $var wire 32 T rom_array[29] [31:0] $end
    $var wire 32 9 rom_array[2] [31:0] $end
    $var wire 32 U rom_array[30] [31:0] $end
    $var wire 32 V rom_array[31] [31:0] $end
    $var wire 32 : rom_array[3] [31:0] $end
    $var wire 32 ; rom_array[4] [31:0] $end
    $var wire 32 < rom_array[5] [31:0] $end
    $var wire 32 = rom_array[6] [31:0] $end
    $var wire 32 > rom_array[7] [31:0] $end
    $var wire 32 ? rom_array[8] [31:0] $end
    $var wire 32 @ rom_array[9] [31:0] $end
    $var wire  5 4 rs1 [4:0] $end
    $var wire  5 5 rs2 [4:0] $end
   $upscope $end
   $scope module ctrl_unit $end
    $var wire  3 ) alu_op [2:0] $end
    $var wire  1 * alu_src $end
    $var wire  1 + branch $end
    $var wire  3 X funct3 [2:0] $end
    $var wire  1 d immSrc $end
    $var wire  7 W opcode [6:0] $end
    $var wire  1 ( reg_write $end
   $upscope $end
   $scope module imem $end
    $var wire 32 a ADDR_WIDTH [31:0] $end
    $var wire 32 a INSTR_WIDTH [31:0] $end
    $var wire 32 & instr [31:0] $end
    $var wire 32 % pc [31:0] $end
    $var wire 32 # rom[-1] [31:0] $end
    $var wire 32 $ rom[0] [31:0] $end
   $upscope $end
   $scope module pcMux $end
    $var wire 32 a ADDR_WIDTH [31:0] $end
    $var wire  1 + PCsrc $end
    $var wire 32 2 branch_PC [31:0] $end
    $var wire 32 3 inc_PC [31:0] $end
    $var wire 32 1 next_PC [31:0] $end
   $upscope $end
   $scope module regFileALU $end
    $var wire  3 ) ALUctrl [2:0] $end
    $var wire 32 , ALUop1 [31:0] $end
    $var wire 32 - ALUop2 [31:0] $end
    $var wire 32 / ALUout [31:0] $end
    $var wire 32 a DATA_WIDTH [31:0] $end
    $var wire  1 0 EQ $end
    $var wire 32 Y addi [31:0] $end
    $var wire 32 [ andA [31:0] $end
    $var wire 32 e bne [31:0] $end
    $var wire  1 ] match $end
    $var wire 32 \ orA [31:0] $end
    $var wire 32 Z sub [31:0] $end
   $upscope $end
   $scope module regFileMux $end
    $var wire 32 - ALUop2 [31:0] $end
    $var wire  1 * ALUsrc $end
    $var wire 32 a DATA_WIDTH [31:0] $end
    $var wire 32 ' ImmOp [31:0] $end
    $var wire 32 . regOp2 [31:0] $end
   $upscope $end
   $scope module sign_ext $end
    $var wire  1 d immSrc $end
    $var wire 32 ' imm_ext [31:0] $end
    $var wire 32 & instruction [31:0] $end
    $var wire  7 W opcode [6:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


